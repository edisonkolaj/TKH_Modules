1. 	When typing a letter on a keyboard the computer goes through a certain set process. Computers do not figure out things on their own so coders must set up steps that the computer will take to understand what it must output. The process begins once a key is pressed, A signal is sent from the keyboard to the computer. Once this signal reaches the computer it goes through a range of steps that was stored by the coder in the computer’s memory. After completing these steps, the computer must then display the key that was pressed. This is a simplified version of what really occurs once a key is typed. It is important to know that a computer Is smart, but it needs to be told what to do.
2. 	Computers have the ability to take inputs and outputs and create experiences. This process begins by first receiving or accepting an input. Similar to question 1, by pressing a key on the keyboard a signal was received and accepted in order to continue the process, which follows a range of steps that a coder had written and then stored in the computer. After the required steps, the output would be an image of the key you had pressed. To explain this further inputs and outputs create experiences by taking many inputs and processing it through many cases that have been designed and pre-defined. Once accepted it will output to create an experience that fits all the pre-defined cases.
3. 	Software products are “infinitely reproducible nothings” because software is simply, variables and numbers that are stored in a computer that are created to complete tasks. These are created by programmers to meet the needs of the marketplace, in which they do. In the article it says that coders may not run the world, but they run the things that run the world. This is because the software is built to manage the global infrastructure. Ultimately code and software is everywhere and it's constantly being made and improved which is adding to the global infrastructure.
4. 	Code can become software through a process where written code is converted to a language that eventually gets compiled into files, which can be executed. Before a coder can begin this process, they treat their objectives as problems and try to find a solution with it through code. The goal of the code is to create simple and detailed instructions that a computer can follow. Once the code has been typed a Compiler is then necessary to convert the typed code into simple instructions that the computer will understand also known as “Machine Language”.
5. 	The point of an algorithm is to simplify and allow coders to complete their tasks in an organized and efficient manner. In the article the Euclid’s Algorithm(formula) which helps find the greatest divisor between two numbers is a great example of efficiently. It is coded once and can be called throughout the code without fully rewriting it over again.
6. 	The DRY principle stands for Don’t Repeat Yourself. This is one of the most important rules in coding.  When coding you should name and create functions just once. By doing this it will ensure that the computer will not confuse functions or misinterpret steps you had written for it. The DRY principle’s point is to prevent redundancies and allow code to be ran in one particular way.
7. 	Object oriented programming can be one of the complex concepts to understand but is very important. This sort of programming is based on objects, and they are always defined each with its own attributes. Since these objects have their own attributes, they can also have its own methods which allows code to be executed and reused easier. This flexibility makes the coder's job easier since they can modify and debug their code without confusion.
8. 	Data is defined as facts or any form of information. This has a direct relation to code because code only runs when information is factual or is accepted by set cases. Also, data is easily stored into a computer which makes it easier for coders to recall them whenever they are needed. Python, for example, can store variables and algorithms that contain data. Once coded the variables and algorithms can be used and recalled whenever necessary to solve problems.
9. 	A framework is the structure and design used by computer that gives it instructions on how to carry out an input given by a user. A framework is bult is made in the most optimized way which allows programmers to be as efficient as possible. It helps remove redundancy and allows coders to feel more secure as they code. Simply put, it helps handle things that usually need to be micromanaged. It gives coders more freedom to be creative and focus on solving the solving problems.
10.  Debugging is simply the process of looking for errors or issues in the code also known as bugs and fixing them. When running code there could be issues and errors that cause it to crash. Issues could be as simple as a missing comma, a tabbed space or even a missing colon. But it could be more complicated like missing statements, calling wrong variables, or having dense modules. Debugging requires a great deal of attention and adaptability, but it can benefit your code and even make it more efficient.
11.  The career I am currently working towards is data analyst, and by learning code I believe it can propel my career forward. The first time I ran into data science was in my undergraduate course, Data Science 315. It was one of the most challenging courses I had taken but I enjoyed it. I liked that I understood what a large data set meant, and I quickly saw the potential and real-life applications of it. In that course we primarily used RStudio, but I also have undergraduate experience with Python, C++, and Excel. I want to expand my languages by adding SQL, Tableau and many more. In doing so It will make me a more competitive applicant when applying for jobs. The area of work I am most interested in is the health sector of a hospital. I am very interested in this area because I always wanted to be involved in health one way or another. My sister is one of my greatest inspirations for wanting to work in health, she is completely dependent, so I wanted to be involved in any way and try to provide and help people like her. I quickly learned Science and chemistry were never for me, but math and statistics always made sense and I can use that to impact and help hospitals. So ultimately learning code and strengthening my technological skills can help take my skills to another level and eventually find employment.
